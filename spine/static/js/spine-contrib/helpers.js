// Generated by CoffeeScript 1.6.3
(function() {
  var ENTER, csrfToken, update,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $.query = function(query_data) {
    return {
      data: JSON.stringify(query_data || {}),
      contentType: 'application/json'
    };
  };

  $.fn.htmlTemplate = function() {
    return this.html().trim();
  };

  $.getSelectedElements = function(selector) {
    var range, selection;
    selection = window.getSelection();
    range = [];
    if (selection.rangeCount) {
      range = selection.getRangeAt(0).cloneContents().childNodes;
    }
    if (selector != null) {
      return jQuery(selector, range);
    } else {
      return jQuery(range);
    }
  };

  $.getCookies = function() {
    var attr_name, cookie, cookies, value, _i, _len, _ref, _ref1;
    cookies = {};
    _ref = document.cookie.split('; ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cookie = _ref[_i];
      _ref1 = cookie.split('='), attr_name = _ref1[0], value = _ref1[1];
      cookies[attr_name] = value;
    }
    return cookies;
  };

  $.setCookie = function(name, value) {
    return document.cookie = "" + name + "=" + value;
  };

  $.getCookie = function(name) {
    return $.getCookies()[name];
  };

  $.fn.setChecked = function(value) {
    if (value) {
      return this.attr('checked', 'checked');
    } else {
      return this.removeAttr('checked');
    }
  };

  csrfToken = $.getCookie('csrftoken');

  $(document).ajaxSend(function(e, xhr, settings) {
    return xhr.setRequestHeader('X-CSRFToken', csrfToken);
  });

  update = function(old_instance, instance) {
    instance = _.extend(old_instance, instance);
    instance.trigger('update');
    return instance;
  };

    if (typeof Spine !== "undefined" && Spine !== null) {
    Spine.FormController = (function(_super) {
      __extends(FormController, _super);

      FormController.prototype.Model = null;

      FormController.prototype.elements = {
        '[name]': 'fields',
        '.control-group': 'control_groups'
      };

      FormController.prototype.get_field = function(name) {
        return this.fields.filter("[name=" + name + "]");
      };

      FormController.prototype.field_value = function(name, value) {
        var field;
        field = this.get_field(name);
        if (value != null) {
          return field.val(value);
        } else {
          return field.val();
        }
      };

      function FormController() {
        this.on_saved = __bind(this.on_saved, this);
        this.save = __bind(this.save, this);
        this.submit = __bind(this.submit, this);
        this.populate_instance = __bind(this.populate_instance, this);
        this.populate_fields = __bind(this.populate_fields, this);
        this.reset_form = __bind(this.reset_form, this);
        this.hide_errors = __bind(this.hide_errors, this);
        this.show_errors = __bind(this.show_errors, this);
        FormController.__super__.constructor.apply(this, arguments);
        this.el.submit(this.submit);
        this.init_instance();
      }

      FormController.prototype.init_instance = function(options) {
        if ((options != null ? options.instance : void 0) != null) {
          this.instance = options.instance;
        }
        if (options != null ? options.force : void 0) {
          this.instance = new this.Model;
        } else {
          if (this.instance == null) {
            this.instance = new this.Model;
          }
        }
        this.populate_fields();
        return this.bind_instance();
      };

      FormController.prototype.bind_instance = function() {
        this.instance.bind('ajaxError', this.show_errors);
        return this.instance.bind('ajaxSuccess', this.on_saved);
      };

      FormController.prototype.unbind_instance = function() {
        this.instance.unbind('ajaxError', this.show_errors);
        return this.instance.unbind('ajaxSuccess', this.on_saved);
      };

      FormController.prototype.show_errors = function(_instance, xhr) {
        var errors, instance, parse_error_response, restore_instance_state, show_errors, _ref,
          _this = this;
        parse_error_response = function(xhr) {
          var SyntaxError, error_data;
          try {
            error_data = JSON.parse(xhr.responseText);
            if (!'errors' in error_data || !'instance' in error_data) {
              throw SyntaxError;
            }
          } catch (_error) {
            SyntaxError = _error;
            alert('Error: there is a communication error!');
            throw SyntaxError;
          }
          return [error_data.instance, error_data.errors];
        };
        _ref = parse_error_response(xhr), instance = _ref[0], errors = _ref[1];
        (restore_instance_state = function() {
          if (_this.instance.cid === _this.instance.id) {
            _this.instance.id = null;
          }
          return _this.instance = update(_this.instance, instance);
        })();
        return (show_errors = function() {
          var attr, msg, _results;
          if (errors.__all__ != null) {
            _this.el.prepend("<div class=\"alert hide alert-error text-center\">\n    " + errors.__all__ + "\n</div>");
            _this.$('.alert').slideDown();
          }
          _results = [];
          for (attr in errors) {
            msg = errors[attr];
            _results.push((_this.get_field(attr)).parents('.control-group').addClass('error').tooltip({
              title: msg
            }).tooltip('show'));
          }
          return _results;
        })();
      };

      FormController.prototype.hide_errors = function() {
        (this.control_groups.removeClass('error')).tooltip('destroy');
        return this.$('.alert').slideUp('fast', function() {
          return this.remove();
        });
      };

      FormController.prototype.reset_form = function() {
        this.fields.val('');
        return this.hide_errors();
      };

      FormController.prototype.populate_fields = function() {
        var attr, value, _ref, _results;
        this.reset_form();
        _ref = this.instance.attributes();
        _results = [];
        for (attr in _ref) {
          value = _ref[attr];
          _results.push(this.field_value(attr, value));
        }
        return _results;
      };

      FormController.prototype.populate_instance = function() {
        var $field, field, modified, name, value, _i, _len, _ref;
        modified = false;
        _ref = this.fields;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          $field = $(field);
          name = $field.attr('name');
          value = this.field_value(name);
          if (this.instance[name] !== value) {
            this.instance[name] = value;
            modified = true;
          }
        }
        return modified;
      };

      FormController.prototype.submit = function(e) {
        if (e != null) {
          if (typeof e.preventDefault === "function") {
            e.preventDefault();
          }
        }
        return this.save();
      };

      FormController.prototype.save = function() {
        if (this.populate_instance()) {
          this.hide_errors();
          return this.instance.save();
        }
      };

      FormController.prototype.on_saved = function(old_instance, new_instance) {
        var _ref;
        this.reset_form();
        this.instance = update(this.instance, new_instance);
        this.unbind_instance();
        return (_ref = this.parent) != null ? typeof _ref.hide === "function" ? _ref.hide() : void 0 : void 0;
      };

      return FormController;

    })(Spine.Controller);
  };

  ENTER = 13;

    if (typeof Spine !== "undefined" && Spine !== null) {
    Spine.ItemController = (function(_super) {
      __extends(ItemController, _super);

      ItemController.prototype.elements = {
        '[contenteditable]': 'fields',
        '[contenteditable]': 'control_groups'
      };

      ItemController.prototype.events = {
        'keydown [contenteditable][name]': 'trigger_field_change',
        'blur [contenteditable][name]': 'trigger_field_change',
        'change [name]': 'save'
      };

      function ItemController() {
        this.unbind_instance = __bind(this.unbind_instance, this);
        this.reset_form = __bind(this.reset_form, this);
        this.render = __bind(this.render, this);
        this.destroy = __bind(this.destroy, this);
        this.destroy_instance = __bind(this.destroy_instance, this);
        this.trigger_field_change = __bind(this.trigger_field_change, this);
        this.bind_instance = __bind(this.bind_instance, this);
        ItemController.__super__.constructor.apply(this, arguments);
      }

      ItemController.prototype.field_value = function(name, value) {
        var field;
        field = this.get_field(name);
        if (value != null) {
          return field.text(_.escape(value));
        } else {
          return _.unescape((field.text() || '').trim());
        }
      };

      ItemController.prototype.bind_instance = function() {
        ItemController.__super__.bind_instance.apply(this, arguments);
        this.instance.bind('update', this.populate_fields);
        return this.instance.bind('destroy', this.destroy);
      };

      ItemController.prototype.trigger_field_change = function(e) {
        if (e.keyCode === ENTER) {
          e.preventDefault();
        }
        if (e.type === 'focusout' || e.keyCode === ENTER) {
          return $(e.target).trigger('change');
        }
      };

      ItemController.prototype.destroy_instance = function() {
        if (confirm('Sure?')) {
          return this.instance.destroy();
        }
      };

      ItemController.prototype.destroy = function() {
        return this.el.fadeOut('fast', this.release);
      };

      ItemController.prototype.render = function() {
        return this.replace(this.template(this.instance));
      };

      ItemController.prototype.reset_form = function() {
        this.fields.text('');
        return this.hide_errors();
      };

      ItemController.prototype.unbind_instance = function() {};

      return ItemController;

    })(Spine.FormController);
  };

    if (typeof Spine !== "undefined" && Spine !== null) {
    Spine.ModalController = (function(_super) {
      __extends(ModalController, _super);

      ModalController.prototype.BodyController = null;

      ModalController.prototype.elements = {
        '.title': 'title',
        '.modal-body': 'body',
        '[name]:visible': 'first_visible_field'
      };

      ModalController.prototype.events = {
        'click .cancel': 'hide',
        'click .save': 'save'
      };

      function ModalController() {
        this.save = __bind(this.save, this);
        this.shown = __bind(this.shown, this);
        this.hidden = __bind(this.hidden, this);
        this.hide = __bind(this.hide, this);
        this.show = __bind(this.show, this);
        ModalController.__super__.constructor.apply(this, arguments);
        this.el.on('hidden', this.hidden);
        this.el.on('shown', this.shown);
        this.body_controller = new this.BodyController({
          parent: this,
          el: this.body
        });
      }

      ModalController.prototype.show = function(title, options) {
        if (title != null) {
          this.title.html(title);
        }
        this.body_controller.init_instance(options);
        return this.el.modal('show');
      };

      ModalController.prototype.hide = function() {
        return this.el.modal('hide');
      };

      ModalController.prototype.hidden = function() {
        return this.body_controller.init_instance({
          force: true
        });
      };

      ModalController.prototype.shown = function() {
        return this.$('[name]:visible').focus();
      };

      ModalController.prototype.save = function() {
        var _ref;
        return (_ref = this.body_controller) != null ? typeof _ref.save === "function" ? _ref.save() : void 0 : void 0;
      };

      return ModalController;

    })(Spine.Controller);
  };

    if (typeof Spine !== "undefined" && Spine !== null) {
    Spine.DropdownController = (function(_super) {
      __extends(DropdownController, _super);

      DropdownController.prototype.events = {
        'click li': 'hide'
      };

      DropdownController.prototype.elements = {
        '*': 'children'
      };

      function DropdownController() {
        this.hide = __bind(this.hide, this);
        this.mouseout = __bind(this.mouseout, this);
        this.show = __bind(this.show, this);
        DropdownController.__super__.constructor.apply(this, arguments);
        this.el.bind('mouseout', this.mouseout);
      }

      DropdownController.prototype.show = function(e) {
        var positionate_under_the_mouse,
          _this = this;
        if (((e != null ? e.pageX : void 0) != null) && e.pageY) {
          (positionate_under_the_mouse = function() {
            return _this.el.css({
              left: e.pageX - 10,
              top: e.pageY - 17
            });
          })();
        }
        return this.el.slideDown('fast');
      };

      DropdownController.prototype.mouseout = function(e) {
        var to_element;
        to_element = e != null ? e.toElement : void 0;
        if (__indexOf.call(this.all_elements(), to_element) < 0) {
          return this.hide();
        }
      };

      DropdownController.prototype.hide = function() {
        return this.el.slideUp('fast');
      };

      DropdownController.prototype.all_elements = function() {
        var children;
        children = this.children.toArray();
        children.push(this.el[0]);
        return children;
      };

      return DropdownController;

    })(Spine.Controller);
  };

    if (typeof Spine !== "undefined" && Spine !== null) {
    Spine.ListController = (function(_super) {
      __extends(ListController, _super);

      ListController.prototype.item_controllers = {};

      ListController.prototype.default_query = function() {
        return {};
      };

      function ListController() {
        this.release_item = __bind(this.release_item, this);
        this.add = __bind(this.add, this);
        this.add_all = __bind(this.add_all, this);
        var Model, name, _i, _len, _ref;
        ListController.__super__.constructor.apply(this, arguments);
        this.items = [];
        _ref = (function() {
          var _results;
          _results = [];
          for (name in this.item_controllers) {
            _results.push(eval(name));
          }
          return _results;
        }).call(this);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          Model = _ref[_i];
          Model.bind('refresh', this.add_all);
          Model.fetch($.query(this.default_query()));
        }
      }

      ListController.prototype.add_all = function(instances) {
        return _.each(instances, this.add);
      };

      ListController.prototype.add = function(instance) {
        var item;
        item = this.get_item(instance);
        this.el.append(item.render());
        return this.items.push(item);
      };

      ListController.prototype.release_item = function(item) {
        return this.items = _.reject(this.items, function(contained) {
          return contained === item;
        });
      };

      ListController.prototype.get_item = function(instance) {
        var ItemController, item;
        item = _.find(this.items, function(item) {
          return item.instance.eql(instance);
        });
        if (item != null) {
          item.instance = _.extend(item.instance, instance);
          item.instance.trigger('update');
        } else {
          ItemController = _.find(this.item_controllers, function(controller, name) {
            return instance.constructor.className === _.last(name.split('.'));
          });
          item = new ItemController({
            instance: instance
          });
          item.bind('release', this.release_item);
        }
        return item;
      };

      return ListController;

    })(Spine.Controller);
  };

}).call(this);

/*
//@ sourceMappingURL=helpers.map
*/
