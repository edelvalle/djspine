// Generated by CoffeeScript 1.4.0
(function() {
  var csrfToken,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $.query = function(query_data) {
    return {
      data: JSON.stringify(query_data || {})
    };
  };

  $.fn.htmlTemplate = function() {
    return this.html().trim();
  };

  $.getCookies = function() {
    var attr_name, cookie, cookies, value, _i, _len, _ref, _ref1;
    cookies = {};
    _ref = document.cookie.split('; ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cookie = _ref[_i];
      _ref1 = cookie.split('='), attr_name = _ref1[0], value = _ref1[1];
      cookies[attr_name] = value;
    }
    return cookies;
  };

  $.setCookie = function(name, value) {
    return document.cookie = "" + name + "=" + value;
  };

  $.getCookie = function(name) {
    return $.getCookies()[name];
  };

  $.fn.setChecked = function(value) {
    if (value) {
      return this.attr('checked', 'checked');
    } else {
      return this.removeAttr('checked');
    }
  };

  csrfToken = $.getCookie('csrftoken');

  $(document).ajaxSend(function(e, xhr, settings) {
    return xhr.setRequestHeader('X-CSRFToken', csrfToken);
  });

    if (typeof Spine !== "undefined" && Spine !== null) {
    Spine.ListController = (function(_super) {

      __extends(ListController, _super);

      ListController.prototype.events = {
        'click [data-action=add]': 'on_add'
      };

      function ListController() {
        this.on_add = __bind(this.on_add, this);

        this.add_item = __bind(this.add_item, this);

        this.add_items = __bind(this.add_items, this);

        var _ref;
        ListController.__super__.constructor.apply(this, arguments);
        if ((_ref = this.ItemController) == null) {
          this.ItemController = ItemController;
        }
        this.Model.bind('refresh', this.add_items);
        this.Model.bind('create', this.add_item);
        this.Model.fetch();
      }

      ListController.prototype.add_items = function(instances) {
        return _.each(instances, this.add_item);
      };

      ListController.prototype.add_item = function(instance) {
        var item;
        item = new this.ItemController({
          instance: instance,
          modal: this.modal
        });
        return this.prepend(item.render());
      };

      ListController.prototype.on_add = function() {
        return null;
      };

      return ListController;

    })(Spine.Controller);
  };

    if (typeof Spine !== "undefined" && Spine !== null) {
    Spine.ItemController = (function(_super) {

      __extends(ItemController, _super);

      ItemController.prototype.events = {
        'click [data-action=destroy]': 'on_destroy',
        'dblclick [data-action=edit]': 'on_edit'
      };

      function ItemController() {
        this.on_edit = __bind(this.on_edit, this);

        this.on_destroy = __bind(this.on_destroy, this);

        this.destroy = __bind(this.destroy, this);

        this.render = __bind(this.render, this);
        ItemController.__super__.constructor.apply(this, arguments);
        this.instance.bind('update', this.render);
        this.instance.bind('destroy', this.destroy);
      }

      ItemController.prototype.render = function() {
        this.replace(this.template(this.instance));
        return this.el;
      };

      ItemController.prototype.destroy = function() {
        return this.el.slideUp('fast', this.release);
      };

      ItemController.prototype.on_destroy = function() {
        if (confirm('Sure?')) {
          return this.instance.destroy();
        }
      };

      ItemController.prototype.on_edit = function() {
        var _ref;
        return (_ref = this.modal) != null ? _ref.show(this.instance) : void 0;
      };

      return ItemController;

    })(Spine.Controller);
  };

}).call(this);
