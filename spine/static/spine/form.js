// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Spine.Form = (function(_super) {

    __extends(Form, _super);

    Form.prototype.events = {
      'click [type="submit"]': 'on_submit'
    };

    Form.prototype.elements = {
      '[name]': 'fields'
    };

    function Form() {
      this.on_submit = __bind(this.on_submit, this);

      this.set_focus_on_first_field = __bind(this.set_focus_on_first_field, this);

      var $field, f, name, _i, _len, _ref;
      Form.__super__.constructor.apply(this, arguments);
      this.set_focus_on_first_field();
      _ref = (function() {
        var _j, _len, _ref, _results;
        _ref = this.fields;
        _results = [];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          f = _ref[_j];
          _results.push($(f));
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $field = _ref[_i];
        name = $field.attr('name');
        if (!(name in this)) {
          this[name] = $field;
        }
      }
    }

    Form.prototype.set_focus_on_first_field = function() {
      var $field, f, _i, _len, _ref;
      _ref = (function() {
        var _j, _len, _ref, _results;
        _ref = this.fields;
        _results = [];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          f = _ref[_j];
          _results.push($(f));
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $field = _ref[_i];
        if ($field.is(':visible')) {
          $field.focus();
          return;
        }
      }
    };

    Form.prototype.on_submit = function(e) {
      return e != null ? e.preventDefault() : void 0;
    };

    return Form;

  })(Spine.Controller);

  Spine.ModelForm = (function(_super) {
    var instance, model, query, search_field;

    __extends(ModelForm, _super);

    model = null;

    search_field = null;

    instance = null;

    query = null;

    function ModelForm() {
      this.render_errors = __bind(this.render_errors, this);

      this.on_submit = __bind(this.on_submit, this);

      this.render = __bind(this.render, this);

      this.for_each_field = __bind(this.for_each_field, this);

      this.populate_instance = __bind(this.populate_instance, this);

      this.bind_instance = __bind(this.bind_instance, this);

      this.on_refresh = __bind(this.on_refresh, this);
      ModelForm.__super__.constructor.apply(this, arguments);
      this.model.bind('refresh', this.on_refresh);
      if (this.search_field) {
        this.query = {};
        this.query[this.search_field] = this[this.search_field].val();
      }
      if (!this.instance && this.query) {
        this.model.fetch($.query(this.query));
      }
    }

    ModelForm.prototype.on_refresh = function() {
      if (!this.instance && this.query) {
        this.instance = this.model.findByAttribute(this.query);
        if (this.instance) {
          this.bind_instance();
          return this.render();
        }
      }
    };

    ModelForm.prototype.bind_instance = function() {
      this.instance.bind('ajaxError', this.render_errors);
      return this.instance.bind('update', this.render);
    };

    ModelForm.prototype.populate_instance = function() {
      return this.for_each_field(function($field, field_name) {
        var value;
        value = $field.val();
        if ($field.attr('type') === 'checkbox') {
          value = $field.is(':checked');
        }
        return this.instance[field_name] = value;
      });
    };

    ModelForm.prototype.for_each_field = function(func) {
      var $field, f, _i, _len, _ref, _results;
      _ref = (function() {
        var _j, _len, _ref, _results1;
        _ref = this.fields;
        _results1 = [];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          f = _ref[_j];
          _results1.push($(f));
        }
        return _results1;
      }).call(this);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $field = _ref[_i];
        _results.push(func.call(this, $field, $field.attr('name')));
      }
      return _results;
    };

    ModelForm.prototype.render = function() {
      return this.for_each_field(function($field, field_name) {
        var value;
        if (field_name in this.instance) {
          value = this.instance[field_name];
          if ($field.attr('type') === 'checkbox') {
            this.log($field.attr('name'));
            return $field.setChecked(value);
          } else {
            return $field.val(value);
          }
        }
      });
    };

    ModelForm.prototype.on_submit = function() {
      ModelForm.__super__.on_submit.apply(this, arguments);
      if (!this.instance) {
        this.instance = new this.model;
        this.bind_instance();
      }
      this.populate_instance();
      return this.instance.save();
    };

    ModelForm.prototype.render_errors = function(intance, xhr) {
      if (this.instance.cid === this.instance.id) {
        this.instance.id = null;
      }
      return this.el.showFormErrors((JSON.parse(xhr.responseText)).errors);
    };

    return ModelForm;

  })(Spine.Form);

}).call(this);
